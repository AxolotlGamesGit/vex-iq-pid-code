{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\ncontroller Controller = controller();\nmotor Left = motor(PORT12, false);\nmotor Right = motor(PORT6, true);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nconst float GEAR_RATIO = 8.0;\nconst float WHEEL_CIRCUMFERENCE = 20.0;\n\n// Drives a certain distance in cm at full speed.\nvoid DriveForCm(float distance) {\n  BrainInertial.setHeading(180,degrees);\n  Left.setVelocity(100, percent);\n  Right.setVelocity(100, percent);\n\n  float spinDistance = (distance / WHEEL_CIRCUMFERENCE) / GEAR_RATIO * -1;\n  float leftDistanceGoal = Left.position(turns) + spinDistance - 0.05;\n  float rightDistanceGoal = Left.position(turns) + spinDistance - 0.05;\n  float p = 0;\n  float i = 0;\n  float d = 0;\n  float error = 0;\n  float pastError = 0;\n  float deltaTime = 0;\n  float pastTime = 0;\n  float bias = 0;\n  float kp = 15;\n  float ki = 0;\n  float kd = 0;\n\n  while (fabs(Left.position(turns) - leftDistanceGoal) > 0.1  &&  fabs(Right.position(turns) - rightDistanceGoal) > 0.1) {\n    error = (BrainInertial.heading(degrees) - 180);\n    deltaTime = Brain.Timer.value() - pastTime;\n\n    p = -1 * error;\n    i += -1 * error * deltaTime;\n    d = (pastError - error) / deltaTime;\n    bias = -5;\n\n    float correctionPercent = (p * kp) + (i * ki) + (d * kd) + bias;\n\n    printf(\"%f\", error);\n    printf(\" %f\", correctionPercent);\n    printf(\" %f\", p * kp);\n    printf(\" %f\", i * ki);\n    printf(\" %f\", d * kd);\n    printf(\" %f\", deltaTime);\n    printf(\"\\n\");\n\n    Left.setVelocity(100 + correctionPercent, percent);\n    Right.setVelocity(100 - correctionPercent, percent);\n\n    pastError = error;\n    pastTime = Brain.Timer.value();\n    \n    wait(50,msec);\n  }\n\n  Left.setVelocity(0, percent);\n  Right.setVelocity(0, percent);\n}\n\n// Go backward for a meter\nvoid driveBackwards() {\n  DriveForCm(-500);\n}\n\n// Go forward for a meter\nvoid driveForwards() {\n  DriveForCm(500);\n}\n\nvoid race() {\n  DriveForCm(490);\n  DriveForCm(-490);\n}\n\nvoid start() {\n  printf(\"test\");\n  printf(\"\\n\");\n}\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n\n  // register event handlers\n  Brain.buttonRight.pressed(driveBackwards);\n  Brain.buttonLeft.pressed(driveForwards);\n  Brain.buttonCheck.pressed(race);\n\n  wait(15, msec);\n  start();\n}","textLanguage":"cpp","robotConfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[12],"name":"Left","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[6],"name":"Right","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"}}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.8","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}